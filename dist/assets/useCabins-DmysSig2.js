import{L as r,N as i,i as b}from"./index-C_TTsSQ5.js";async function p(){const{data:a,error:e}=await r.from("cabins").select("*");return e&&i("cabins could not be loaded"),a}async function y(a){const{error:e}=await r.from("cabins").delete().eq("id",a);e&&i("Cabin couldn't be deleted, please try again later!")}async function C(a){let e,n;if(typeof a.image!="string"){e=`${Math.random()}-${a.image.name}`.replace("/","");const{data:t,error:s}=await r.storage.from("cabin-images").upload(e,a.image);if(s){i("Image could not been uploaded");return}const c=m(t.path);n={...a,image:c};const{error:o}=await r.from("cabins").insert([n]);if(o){await d(t.path),i("Failed to add Cabin!");return}}else{const{error:t}=await r.from("cabins").insert([a]);if(t){i("Failed to add Cabin!");return}}}function m(a){const{data:e}=r.storage.from("cabin-images").getPublicUrl(a),{publicUrl:n}=e;return n}async function h(a,e){if(typeof a.image=="string"){const{error:t}=await r.from("cabins").update(a).eq("id",e);t&&i("Failed editing the cabin please try again later!")}else{const{data:t,error:s}=await r.from("cabins").select("image").eq("id",e);if(s){i("An error ocurred while fetching");return}const c=t[0].image,o=a.image[0],l=`${Math.random()}-${o.name}`.replace("/",""),{data:u,error:g}=await r.storage.from("cabin-images").upload(l,o);if(g){i("Cannot update image! Please try again later");return}const f=m(u.path);await r.from("cabins").update({...a,image:f}).eq("id",e),await d(c.split("cabin-images/"))}}async function d(a){await r.storage.from("cabin-images").remove(a)}function q(){const{isLoading:a,error:e,data:n}=b({queryKey:["cabin"],queryFn:p});return{isLoading:a,error:e,cabins:n}}export{C as a,y as d,h as e,q as u};
